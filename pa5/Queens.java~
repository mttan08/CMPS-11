// Queens.java
// Matthew Tan
// mxtan
// pa5
// Gives all the posibilities of where a queen can move
// based on an algorithm from the movement of Rooks.

import java.util.*;
import java.lang.*;

public class Queens
{
    public static void main(String[] args)
    {
        int num = 0;
        int factorial;
        int[] A;
        int count = 0;
        String verbosity = "-v";        

        if (args.length == 0)
        {
            printUsage();
            System.exit(0);
        }
        else if (args.length == 1)
        {
           try
           {
                num = Integer.parseInt(args[0]);
           }
           catch (Exception e)
           {
               printUsage();
               System.exit(0);
           }
            //System.out.println("num is: " + num);
            A = new int[num + 1];
            //System.out.println("A.length is: " + A.length);
            for (int i = 0; i < A.length; i++)
            {
                A[i] = i;
                //System.out.println("A[i]: " + A[i]);
            }
            
            factorial = fact(num);
            for (int i = 1; i <= factorial; i++)
            {
                nextPermutation(A);
                if (isSolution(A))
                {
                    count++;
                }
            }
            System.out.println(num + "-Queens has " + count + " solutions"); 
        }
        else if (args.length == 2 && verbosity.equals(args[0]))
        {
           try
           {
                num = Integer.parseInt(args[1]);
           }
           catch(Exception e)
           {
               printUsage();
               System.exit(0);
           }
            //System.out.println("num is: " + num);
            A = new int[num + 1];
            //System.out.println("A.length is: " + A.length);
            for (int i = 0; i < A.length; i++)
            {
                A[i] = i;
                //System.out.println("A[i]: " + A[i]);
            }
            
            factorial = fact(num);
            for (int i = 1; i <= factorial; i++)
            {
                nextPermutation(A);
                if (isSolution(A))
                {
                    printArr(A);
                    count++;
                }
            }
            System.out.println(num + "-Queens has " + count + " solutions");   
        }
    }

    public static void nextPermutation(int[] A)
    {
        int pivot = 0;
        int successor = 0;
        int n = A.length - 1;
        for (int i = n - 1; i > 0; i--)
        {
            if (A[i] < A[i + 1])
            {
                pivot = i;
                // System.out.println("case 1: The pivot is: " + pivot
               //      + " successor is: " + successor);
                break;
            }
        }
        
        if (pivot == 0)
        {

            //System.out.println("case 2: The pivot is: " + pivot
           //   + " successor is: " + successor);
            //System.out.println("A.length is: " + A.length);
            reverse(A, 1, A.length - 1);
            //System.out.print("After reverse is: ");
            return;
        }
        
        for (int j = n; j > pivot; j--)
        {
            if (A[j] > A[pivot])
            {

                // System.out.println("Successor is: " + successor);
                successor = j;
                // System.out.println("case 3: The pivot is: " + pivot
               //    + " successor is: " + successor);
                break;
            }
        }
        
        /* int temp = pivot;
        pivot = successor;
        successor = temp;*/
        swap(A, pivot, successor);
        //System.out.println("Successor is: " + successor + " pivot is: " + pivot);
        reverse(A, pivot + 1, A.length - 1); 
        return;
    }
    
    public static boolean isSolution(int[] A)
    {
        for (int r = 2; r < A.length; r++)
        {
            for (int c = 1; c < r; c++)
            {
                if ((A[r] - A[c]) == (r - c))
                {
                    return false;
                }
                else if ((A[c] - A[r]) == (r - c))
                {
                    return false;
                }
            }
        }
        return true;
    }

    public static void swap(int[] A, int  i, int j)
    {
        int temp = A[i];
        A[i] = A[j];
        A[j] = temp;
    }

    public static int fact(int n)
    {
        if (n <= 0)
        {
            return 1;
        }
        else
        {
            return n * fact(n - 1);
        }
    }

    public static void printArr(int[] A)
    {
        System.out.print("(");
        for (int i = 1; i < A.length; i++)
        {   
            System.out.print(A[i]);
            if (i != A.length - 1)
            {
                System.out.print( ", ");
            }
        }
        System.out.print(")\n");
    }

    public static void reverse(int[] A, int i, int  j)
    {
        //System.out.println("reverse: A.length is: " + A.length 
        //     + " i is: " + i + " j is: " + j);

        while (i < j)
        {
            //System.out.println("while loop: i is: " + i + " j is: " + j);
            //System.out.println("Before swap: " + " i: " + i + " j: " + j);
            swap(A, i, j);
            //System.out.println("After swap: " + " i: " + i + " j: " + j);
            i++;
            j--;
            //System.out.println("After increment: " + " i: " + i + " j: " + j);
        }
    }

    public static void printUsage()
    {
        System.out.println("Usage: Queens[-v] number");
        System.out.println("Option: -v verbose output, print all solutions");
    }
}
